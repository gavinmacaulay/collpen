            %% Script to check what denoising technique works better for PIV computation
%
% The script is divided into different blocks that can be run separatedly
% as long as the script has ben run at least once (to generate the
% intermediate data). In any case, it is recommended running the
% first block to configure the input variables.
%
% 
% This is the folder structure generated by this script
% 
% . % The root folder intially contains the raw input videos and some manually labelled prey positions (groundtruth)
% ----- PIV_GT_result % Result of the comparison between the calculated PIVs and the groundtruth
% |   ----- PIV_GT_comparisons.mat
% |   ----- PIV_GT_comparisons.xls
% ----- PIVdata % Background images from the input videos (for denoising)
% |   ----- video1_BG.bmp
% |   ----- video2_BG.bmp
% ----- denoised % Folder containing denoised videos and their associated PIVS
% |   ----- PIVdata
% |   |   ----- 16 % Window size for PIV computation
% |   |   |   ----- video1___01-Raw\ images-filter_PIV.mat
% |   |   |   ----- video1___02-Background_subtraction_+_normalization_filter_PIV.mat
% |   |   |   ----- video2___01-Raw\ images-filter_PIV.mat
% |   |   |   ----- video2___02-Background_subtraction_+_normalization_filter_PIV.mat
% |   |   ----- 32
% |   |   |   ----- video1___01-Raw\ images-filter_PIV.mat
% |   |   |   ----- video1___02-Background_subtraction_+_normalization_filter_PIV.mat
% |   |   |   ----- video2___01-Raw\ images-filter_PIV.mat
% |   |   |   ----- video2___02-Background_subtraction_+_normalization_filter_PIV.mat
% |   |   ----- 64
% |   |       ----- video1___01-Raw\ images-filter_PIV.mat
% |   |       ----- video1___02-Background_subtraction_+_normalization_filter_PIV.mat
% |   |       ----- video2___01-Raw\ images-filter_PIV.mat
% |   |       ----- video2___02-Background_subtraction_+_normalization_filter_PIV.mat
% |   ----- video1___01-Raw\ images-filter.avi
% |   ----- video1___02-Background_subtraction_+_normalization_filter.avi
% |   ----- video2___01-Raw\ images-filter.avi
% |   ----- video2___02-Background_subtraction_+_normalization_filter.avi
% ----- video1.avi
% ----- video2.avi
% ----- prey_position % Folder containing the groundtruth
%     ----- video1_prey_positions.mat
%     ----- predmodel2013_TREAT_Brown\ net_didson_block521_sub1_prey_positions.mat
%

%% Select Input parameters
clear
close all

% -------------------------------------------------------------------------------
% Change video folder to the one containing your videos
% The folder should containt all input videos to be tested and a folder
% containing manually labelled prey positions under the name
% '/prey_position'. This folder is generated by the script 'test_prey_labeling.m'
% -------------------------------------------------------------------------------

video_folder = 'C:\collpen_jc\method_paper_sources';

% -------------------------------------------------------------------------------
% Select the window size for PIV computation
% This is the distance among PIVs and also indicates the maximum distance
% detected between frames. That is, in a window_size of 16 pixels the 
% maximum displacement between frames will be 16/2 = 8 pixels.
% -------------------------------------------------------------------------------

PIV_winsize         = [16,32,64];

% -------------------------------------------------------------------------------
% Configuration of the input videos
% -------------------------------------------------------------------------------

px_per_meter        = 71.4413;
frames_per_second   = 8;

% Select denoising techniques to be applied. 

denoising_techniques_name{1}  = [];
denoising_techniques_name{2}  = [];
denoising_techniques_name{3}  = [];
denoising_techniques_name{4}  = [];
denoising_techniques_name{5}  = [];
denoising_techniques_name{6}  = [];
denoising_techniques_name{7}  = [];
denoising_techniques_name{8}  = [];
denoising_techniques_name{9}  = [];
denoising_techniques_name{10} = [];
denoising_techniques_name{11} = [];
denoising_techniques_name{12} = [];
denoising_techniques_name{13} = [];
denoising_techniques_name{14} = [];
denoising_techniques_name{15} = [];
denoising_techniques_name{16} = [];
denoising_techniques_name{17} = [];
denoising_techniques_name{18} = [];
denoising_techniques_name{19} = [];
denoising_techniques_name{20} = [];
denoising_techniques_name{21} = [];
denoising_techniques_name{22} = [];
denoising_techniques_name{23} = [];
denoising_techniques_name{24} = [];
denoising_techniques_name{25} = [];
denoising_techniques_name{26} = [];

denoising_techniques = zeros(26,2);

% -------------------------------------------------------------------------------
% Comment or uncomment the desired denoising techniques
% -------------------------------------------------------------------------------

denoising_techniques(1,:)  = [-1,0];    % Raw images
denoising_techniques(2,:)  = [0,0];     % Background subtraction + normalization
denoising_techniques(3,:)  = [1,0];     % Gaussian
denoising_techniques(4,:)  = [3,0];     % Median
denoising_techniques(5,:)  = [5,0];     % Median + average
denoising_techniques(6,:)  = [1,1];     % Wavelet + gaussian
denoising_techniques(7,:)  = [3,1];     % Wavelet + Median
denoising_techniques(8,:)  = [5,1];     % Wavelet + Median + average
denoising_techniques(9,:)  = [9,50];    % DPAD 50
denoising_techniques(10,:) = [11,50];   % DPAD 50 + Median
denoising_techniques(11,:) = [10,25];   % SRAD 25
denoising_techniques(12,:) = [10,50];   % SRAD 50
denoising_techniques(13,:) = [10,100];  % SRAD 100
denoising_techniques(14,:) = [12,25];   % SRAD 25 + Median
denoising_techniques(15,:) = [12,50];   % SRAD 50 + Median
denoising_techniques(16,:) = [12,100];  % SRAD 100 + Median
denoising_techniques(17,:) = [8,0];     % Frost
denoising_techniques(18,:) = [0,-1];    % Background subtraction only
% denoising_techniques(19,:)  = [9,25];    % DPAD 25
% denoising_techniques(20,:)  = [9,75];    % DPAD 75
% denoising_techniques(21,:)  = [9,100];    % DPAD 100
% denoising_techniques(22,:) = [11,25];   % DPAD 25 + Median
denoising_techniques(23,:) = [11,75];   % DPAD 75 + Median
% denoising_techniques(24,:) = [11,100];   % DPAD 100 + Median
% denoising_techniques(25,:) = [10,75];  % SRAD 100
denoising_techniques(26,:) = [12,75];   % SRAD 75 + Median

denoising_techniques_name{1}  = '01-Raw images-filter';
denoising_techniques_name{2}  = '02-Background_subtraction_+_normalization_filter';
denoising_techniques_name{3}  = '03-Gaussian-filter';
denoising_techniques_name{4}  = '04-Median-filter';
denoising_techniques_name{5}  = '05-Median + average-filter';
denoising_techniques_name{6}  = '06-Wavelet + gaussian-filter';
denoising_techniques_name{7}  = '07-Wavelet + Median-filter';
denoising_techniques_name{8}  = '08-Wavelet + Median + average-filter';
denoising_techniques_name{9}  = '09-DPAD 50-filter';
denoising_techniques_name{10} = '10-DPAD 50 + Median-filter';
denoising_techniques_name{11} = '11-SRAD 25-filter';
denoising_techniques_name{12} = '12-SRAD 50-filter';
denoising_techniques_name{13} = '13-SRAD 100-filter';
denoising_techniques_name{14} = '14-SRAD 25 + Median-filter';
denoising_techniques_name{15} = '15-SRAD 50 + Median-filter';
denoising_techniques_name{16} = '16-SRAD 100 + Median-filter';
denoising_techniques_name{17} = '17-Frost-filter';
denoising_techniques_name{18} = '18-Background_subtraction_only';
% denoising_techniques_name{19}  = '19-DPAD 25';
% denoising_techniques_name{20} = '20-DPAD 75';
% denoising_techniques_name{21} = '21-DPAD 100';
% denoising_techniques_name{22} = '22-DPAD 25 + Median-filter';
denoising_techniques_name{23} = '23-DPAD 75 + Median-filter';
% denoising_techniques_name{24} = '24-DPAD 100 + Median-filter';
% denoising_techniques_name{25} = '25-SRAD 100';
denoising_techniques_name{26} = '26-SRAD 75 + Median-filter';

%% Calculate Background from input videos
 
% Input: Folder containing sonar videos

% Output: Folder containing one Bg image per input video: [video_folder '/PIVdata']

d=dir([video_folder '/*.avi']);

disp('Calculate background from input files');

for i=1:length(d)
    if exist(strrep([video_folder '/PIVdata/' d(i).name], '.avi', '_BG.bmp'),'file')~=2
        disp([datestr(now),' Running on file: ' num2str(i) ' of  ' num2str(length(d))]);
        % Establish background image
        parstrbgimage = struct('showmsg',1,'Nframes',200,'perc',30,...
            'write',1,'useold',0);
        [bgimage, filepathbg] = PIV_createBGImage(video_folder, d(i).name, ...
            parstrbgimage);
        disp([datestr(now),' BGImage saved as: ' filepathbg]);
    else
        disp(['BGImage already exists. Skipping ' d(i).name]);
    end
end

%% Apply denoise

% Input: Folder containing sonar videos
%        Folder containing Bg images

% Output: Folder containing the denoised videos: [video_folder '/denoised']


for i = 1: length(denoising_techniques_name)
    if(~cellfun(@isempty,denoising_techniques_name(i)))
        disp(['Running denoising technique' denoising_techniques_name{i}]);
        denoise_video_folder(video_folder,denoising_techniques(i,1),...
            denoising_techniques(i,2),denoising_techniques_name{i});
    end
end

%% PIV computation

% Input: Folder containing the denoised videos

% Output: Folders (one per window size) containing PIVs calculated from
%         the denoised videos: [denoised_folder '/PIVdata/' winsize]

denoised_folder = [video_folder '/denoised'];

for i = 1:length(PIV_winsize)
    disp(['Getting PIVs for window size ' PIV_winsize(i)]);
    getPIVvectorsFromVideoFolder(denoised_folder, PIV_winsize(i));

end