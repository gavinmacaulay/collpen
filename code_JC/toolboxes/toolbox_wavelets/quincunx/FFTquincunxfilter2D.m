function [FA,FS]=FFTquincunxfilter2D(dim,alpha,type);% FFTQUINCUNXFILTER2D Supplies filters for the 2D quincunx transform.% 	[FFTanalysisfilters,FFTsynthesisfilters]=FFTquincunxfilter2D(dim,alpha,type)% 	computes the frequency response of low- and high-pass filters. %% 	Input:% 	dim = dimensions of the input signal % 	alpha = degree of the filters, any real number >=0 %   type = %     class I: McClellan-based filters %       o = orthogonal; b = discrete linear B-spline (synthesis); d = dual%     class II: Polyharmonic B-spline wavelets (Rabut-style localization)%       Po = orthogonal; Pb = B-spline; Pd = dual%     class III: Polyharmonic B-spline wavelets (isotropic-style%                localization)%       PO = orthogonal {=Po}; PB = B-spline; PD = dual%% Dimitri Van De Ville%      Biomedical Imaging Group, BIO-E/STI%      Swiss Federal Institute of Technology Lausanne%      CH-1015 Lausanne EPFL, Switzerland                        m=dim(1);n=dim(2);gamma=alpha+2;% Setup downsampling matrixD=[1 1; 1 -1]';% Coordinates in the Fourier domain[xo,yo]=ndgrid(2*pi*([1:m]-1)/m,2*pi*([1:n]-1)/n); for iter=0:1,  if iter==0, % First filter: no downsampling    x=xo;    y=yo;  end;  if iter>0,  % Coordinates after downsampling    x=D(1,1)*xo+D(1,2)*yo;    y=D(2,1)*xo+D(2,2)*yo;    % D=D*D;    % prepare filter for next iteration  end;  if lower(type(1)) == 'p', % Isotropic polyharmonic splines    if iter==0,       [ac,acD,loc,B] = FFTquincunxpolyfilter(x,y,gamma,type(2));    else      %ac = fftshift(interp2(xo,yo,ac,mod(x,2*pi),mod(y,2*pi),'*nearest'),1);      %acD= fftshift(interp2(xo,yo,acD,mod(x,2*pi),mod(y,2*pi),'*nearest'));      %loc= fftshift(interp2(xo,yo,loc,mod(x,2*pi),mod(y,2*pi),'*nearest'),1);      %B  = fftshift(interp2(xo,yo,B,mod(x,2*pi),mod(y,2*pi),'*nearest'),1);      ac = interp2(xo,yo,ac0,mod(x,2*pi),mod(y,2*pi),'*nearest');      acD= interp2(xo,yo,acD0,mod(x,2*pi),mod(y,2*pi),'*nearest');      loc= interp2(xo,yo,loc0,mod(x,2*pi),mod(y,2*pi),'*nearest');      B  = interp2(xo,yo,B0,mod(x,2*pi),mod(y,2*pi),'*nearest');      %[ac,acD,loc,B] = FFTquincunxpolyfilter(x,y,gamma,type(2));    end;    ortho = acD./ac;   else      [ortho,B] = FFTquincunxmcclellan(x,y,alpha);  end;  % Lowpass filter  [H,H1] = FFTquincunxfilter2D_lowpass(x,y,type,B,ortho);  % Reversed filter  B0 = B;  if iter==0,    B=fftshift(B); ortho=fftshift(ortho);  else     B=fftshift(B,1); ortho=fftshift(ortho,1);  end;  if lower(type(1)) == 'p',    ac0=ac; acD0=acD; loc0=loc;    if iter==0,      ac=fftshift(ac);      acD=fftshift(acD);      loc=fftshift(loc);    else      ac=fftshift(ac,1);      acD=fftshift(acD);      loc=fftshift(loc,1);    end;  else    ac=0; ac0=0; acD=0; acD0=0; loc=0; loc0=0;  end;  [Hd,H1d] = FFTquincunxfilter2D_highpass(x-pi,y-pi,type,B,ortho,ac,ac0,acD,acD0,loc,loc0);  % Highpass filters: modulation  G  = exp(i*x).*H1d;  G1 = exp(-i*x).*Hd;  % Fill up array with analysis and synthesis filters  FA(:,:,iter*2+1) = H1;  FA(:,:,iter*2+2) = G1;  FS(:,:,iter*2+1) = H;  FS(:,:,iter*2+2) = G;end;