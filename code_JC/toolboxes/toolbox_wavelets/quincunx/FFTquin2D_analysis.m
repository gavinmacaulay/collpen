function y2=FFTquin2D_analysis(x,J,FA);% FFTQUIN2D_ANALYSIS Perform 2D quincunx wavelet analysis% 	y2 = FFTquin2D_analysis(x,J,FA)%% 	Input:%       x  = input data%       J  = number of iterations%       FA = analysis filters%%       Output:%       y2 = result (folded)%% Dimitri Van De Ville%      Biomedical Imaging Group, BIO-E/STI%      Swiss Federal Institute of Technology Lausanne%      CH-1015 Lausanne EPFL, Switzerland% Dimensions of data[m,n]=size(x); % Dimensions of remaining folded lowpass subbandcm=m; cn=n; % Check dimensions of input datafor iter=1:2,  tmp=size(x,iter)/2^floor((J+2-iter)/2);  if round(tmp)~=tmp,    disp(' ')    disp('The size of the input signal must be a sufficient power of two!')    disp(' ')    y2=[];    return;  end;end;% Analysis filters:%  H1,   G1   : filters for iterations with mod(j,2)=1%  H1D,  G1D  : filters for iterations with mod(j,2)=0% (premultiply analysis filters by the downsampling factor; i.e., det(D)=2)H1=FA(:,:,1)/2;G1=FA(:,:,2)/2;H1D=FA(:,:,3)/2;G1D=FA(:,:,4)/2;% Compute the FFT of the input dataX=fftn(x); clear x;% Initialize cube for folded wavelet coefficientsy2=zeros(cm,cn);for j=1:J,	mj=mod(j,2);	% Select filter	switch mj,	  case 1,			H=H1;		G=G1;	  case 0,		H=H1D;		G=G1D;	end;		% Filtering	Y1=H(1:size(X,1),1:size(X,2)).*X;	Y2=G(1:size(X,1),1:size(X,2)).*X;	% Downsampling & upsampling	switch mj,	  case 1,		if j~=J,		  % This operates like: Y1=Y1+fftshift(Y1); Y1=Y1(1:cm,1:cn/2);  		  Y1(1:cm/2,1:cn/2)=Y1(1:cm/2,1:cn/2)+Y1(cm/2+1:cm,cn/2+1:cn);		  Y1(cm/2+1:cm,1:cn/2)=Y1(cm/2+1:cm,1:cn/2)+Y1(1:cm/2,cn/2+1:cn);		  Y1=Y1(1:cm,1:cn/2);                else                  Y1=Y1+fftshift(Y1);                end;		Y2=Y2 + fftshift(Y2);		%! y2(1:cm,cn/2+1:cn)=fold2D(real(ifftn(Y2)),mj,m,n); 		y2(1:cm,cn/2+1:cn)=fold2D((ifftn(Y2)),mj,m,n);		cn=cn/2;	  case 0,		m2=m/2;n2=n/2;		Y1=Y1(1:m2,1:n2)+Y1(m2+1:2*m2,1:n2);		Y2=Y2(1:m2,1:n2)+Y2(m2+1:2*m2,1:n2);		y2(cm/2+1:cm,1:cn)=real(ifftn(Y2));		cm=cm/2;		% Preparing filters for next three iterations		lm=1:2:m; ln=1:2:n; 		H1=H1(lm,ln);		G1=G1(lm,ln);        	H1D=H1D(lm,ln);        	G1D=G1D(lm,ln);		m=m2; n=n2; 	end;	X=Y1;end;% Insert folded lowpass subbandy2(1:cm,1:cn)=fold2D(real(ifftn(Y1)),mj,m,n);return;% ----------------------------------------------------------------------% Fold 2D subband% ----------------------------------------------------------------------function f=fold2D(u,j,m,n)switch j,  case 0,    f=u;  case 1,    f=u(:,1:2:n)+u(:,2:2:n);end;